#  *******************************************************************************
#  Copyright (c) 2024-2025 Eclipse Foundation and others.
#  This program and the accompanying materials are made available
#  under the terms of the Eclipse Public License 2.0
#  which is available at http://www.eclipse.org/legal/epl-v20.html
#  SPDX-License-Identifier: EPL-2.0
#  *******************************************************************************

from datetime import UTC, datetime
from logging import getLogger
from typing import Self

from . import Policy, PolicyType

logger = getLogger(__name__)


class ProjectPermissionsReviewPolicy(Policy):
    """
    A policy to create periodic GitHub issues for reviewing maintainer and collaborator permissions.

    Uses scheduler-based approach to create review issues at regular intervals.
    """

    review_frequency: int = 12
    enabled_by_default: bool = True
    issue_title: str = "Periodic Review: Project Permissions"
    issue_body_template: str | None = None

    @property
    def type(self) -> PolicyType:
        return PolicyType.PROJECT_PERMISSIONS_REVIEW

    def merge(self, other: Self) -> Self:
        copy = super().merge(other)
        copy.review_frequency = other.review_frequency
        copy.enabled_by_default = other.enabled_by_default
        copy.issue_title = other.issue_title
        if other.issue_body_template is not None:
            copy.issue_body_template = other.issue_body_template
        return copy

    def get_issue_body(self, repo_name: str, github_id: str, custom_body: str | None = None) -> str:
        """Generate the issue body for the project permissions review."""
        if custom_body:
            return custom_body

        if self.issue_body_template:
            return self.issue_body_template

        current_year = datetime.now(UTC).year
        return f"""## {current_year} Project Permissions Review

This is a periodic review to ensure that access permissions for this repository and related services remain appropriate and secure.

- [ ] **Review Current Access**: Verify that all maintainers/commiters and collaborators still require their current level of access
- [ ] **Evaluate Activity**: Check recent contribution activity to ensure accounts are active
- [ ] **Security Audit**: Remove unused or unnecessary permissions
- [ ] **Update Documentation**: Ensure that any changes to permissions are documented appropriately
---

*This issue was automatically generated by Otterdog's project permissions review policy.*
"""
